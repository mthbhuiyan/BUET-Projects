CREATE OR REPLACE FUNCTION COUNT_BOOK_SALE(BKID IN CHAR, FROM_WHEN IN DATE, TO_WHEN IN DATE)
RETURN NUMBER IS
    SOLD_BOOK NUMBER ;
BEGIN
    SELECT SUM(QUANTITY) INTO SOLD_BOOK
    FROM
        (
        SELECT ORDER_ID OID
        FROM ORDER_INVOICE 
        WHERE ORDER_DATE BETWEEN FROM_WHEN AND TO_WHEN AND ORDER_UPDATE<>'canceled'
        ) O JOIN
        ORDER_INVOICE_LINE L ON(O.OID = L.ORDER_ID)
    WHERE L.BOOK_ID = BKID ;
    RETURN SOLD_BOOK ;
END ;
/

CREATE OR REPLACE FUNCTION COUNT_STORE_SALE(STID IN NUMBER, FROM_WHEN IN DATE, TO_WHEN IN DATE)
RETURN NUMBER IS
    AMOUNT NUMBER ;
BEGIN
    SELECT SUM(TOTAL_PRICE) INTO AMOUNT
    FROM ORDER_INVOICE 
    WHERE ORDER_DATE BETWEEN FROM_WHEN AND TO_WHEN AND ORDER_UPDATE<>'canceled' AND STORE_ID = STID ;
    RETURN AMOUNT ;
END ;
/

CREATE OR REPLACE FUNCTION COUNT_AUTHOR_SALE(AID IN NUMBER, FROM_WHEN IN DATE, TO_WHEN IN DATE)
RETURN NUMBER IS
    SOLD_BOOK NUMBER ;
BEGIN
    SOLD_BOOK := 0 ;
    FOR O IN
        (
        SELECT BOOK_ID
        FROM BOOK_AUTHOR
        WHERE AUTHOR_ID = AID
        )
    LOOP
        SOLD_BOOK := SOLD_BOOK + COUNT_BOOK_SALE(O.BOOK_ID, FROM_WHEN, TO_WHEN) ;
    END LOOP ;
END ;
/

CREATE OR REPLACE FUNCTION COUNT_CUSTOMER_BUY(CMRID IN NUMBER, FROM_WHEN IN DATE, TO_WHEN IN DATE)
RETURN NUMBER IS
    AMOUNT NUMBER ;
BEGIN
    SELECT SUM(TOTAL_PRICE) INTO AMOUNT
    FROM ORDER_INVOICE 
    WHERE ORDER_DATE BETWEEN FROM_WHEN AND TO_WHEN AND TOTAL_PRICE = PAID_AMOUNT AND CUSTOMER_ID = CMRID ;
    RETURN AMOUNT ;
END ;
/

CREATE OR REPLACE FUNCTION GET_RATING(BID IN CHAR)
RETURN NUMBER IS
    N_RATING NUMBER ;
    SUM_RATING NUMBER ;
BEGIN
    SELECT NO_RATING, COMBINED_RATING INTO N_RATING, SUM_RATING
    FROM BOOK
    WHERE BOOK_ID = BID ;
    IF N_RATING = 0 THEN
        RETURN NULL ;
    ELSE
        RETURN SUM_RATING/N_RATING ;
    END IF ;
END ;
/
/*
CREATE OR REPLACE FUNCTION MATCHING(BID IN CHAR, SEARCH IN VARCHAR2)
RETURN NUMBER IS
    
BEGIN
END ;
*/