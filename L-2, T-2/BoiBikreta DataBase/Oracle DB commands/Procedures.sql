CREATE OR REPLACE PROCEDURE CHANGE_EMP_JOB(EMP_ID IN NUMBER, NXT_JOB IN NUMBER, NXT_STORE IN NUMBER, ST_DATE IN DATE) IS
    NEW_JOB NUMBER ;
    NEW_STORE NUMBER ;
    START_DATE DATE ;
BEGIN
    NEW_JOB := NEW_JOB ;
    NEW_STORE := NEW_STORE ;
    START_DATE := ST_DATE ;
    
    IF NEW_STORE = NULL THEN
        SELECT STORE_ID INTO NEW_STORE
        FROM EMPLOYEE
        WHERE EMPLOYEE_ID = EMP_ID ;
    END IF ;
    
    IF START_DATE = NULL THEN
        START_DATE := CURRENT_TIMESTAMP ;
    END IF ;
    
    IF NEW_JOB = NULL THEN
        UPDATE EMPLOYEE
        SET JOB_ID = NEW_JOB
        WHERE EMPLOYEE_ID = EMP_ID ;
    
        INSERT INTO EMPLOYEE_JOB (EMPLOYEE_ID, STORE_ID, JOB_ID, JOIN_DATE)
        VALUES (EMP_ID, NEW_STORE, NEW_JOB, START_DATE) ;
    ELSE
        DELETE FROM EMPLOYEE
        WHERE EMPLOYEE_ID = EMP_ID ;
    END IF ;
    
    UPDATE EMPLOYEE_JOB
    SET RESIGN_DATE = START_DATE
    WHERE EMPLOYEE_ID = EMP_ID ;
END ;
/

CREATE OR REPLACE PROCEDURE RECEIVE_ORDER_PAY(OID IN NUMBER, AMOUNT_PAY IN NUMBER, RECEIVE_DATE IN DATE, METHOD_PAY IN VARCHAR2, BANK IN VARCHAR2) IS
    BID NUMBER ;
    TID NUMBER ;
    C NUMBER ;
    
    NOT_SUPPORTED EXCEPTION ;
BEGIN
    SELECT BANK_ID INTO BID
    FROM BANK
    WHERE BANK_NAME = BANK ;
    
    SELECT COUNT(*) INTO C
    FROM PAY_SYSTEM
    WHERE PAY_METHOD = METHOD_PAY AND BANK_ID = BID ;
    
    IF C = 0 THEN
        RAISE NOT_SUPPORTED ;
    END IF;
    
    TID := Transaction_seq.nextval ;
    
    INSERT INTO TRANSACTION (TRANSACTION_ID, AMOUNT, TRANSACTION_DATE, PAY_METHOD, BANK_ID)
    VALUES (TID, AMOUNT_PAY, RECEIVE_DATE, METHOD_PAY, BID) ;
    
    INSERT INTO ORDER_PAYMENT (TRANSACTION_ID, ORDER_ID)
    VALUES (TID, OID) ;
END ;
/

CREATE OR REPLACE PROCEDURE GIVE_SUPPLY_PAY(SID IN NUMBER, AMOUNT_PAY IN NUMBER, RECEIVE_DATE IN DATE, METHOD_PAY IN VARCHAR2, BANK IN VARCHAR2) IS
    BID NUMBER ;
    TID NUMBER ;
    C NUMBER ;
    
    NOT_SUPPORTED EXCEPTION ;
BEGIN
    SELECT BANK_ID INTO BID
    FROM BANK
    WHERE BANK_NAME = BANK ;
    
    SELECT COUNT(*) INTO C
    FROM PAY_SYSTEM
    WHERE PAY_METHOD = METHOD_PAY AND BANK_ID = BID ;
    
    IF C = 0 THEN
        RAISE NOT_SUPPORTED ;
    END IF;
    
    TID := Transaction_seq.nextval ;
    
    INSERT INTO TRANSACTION (TRANSACTION_ID, AMOUNT, TRANSACTION_DATE, PAY_METHOD, BANK_ID)
    VALUES (TID, AMOUNT_PAY, RECEIVE_DATE, METHOD_PAY, BID) ;
    
    INSERT INTO SUPPLY_PAYMENT (TRANSACTION_ID, SUPPLY_ID)
    VALUES (TID, SID) ;
END ;
/


CREATE OR REPLACE PROCEDURE CANCEL_ORDER(OID IN NUMBER, CANCEL_DATE IN DATE) IS
    O_UPDATE VARCHAR2(32) ;
    
    ALREADY_CANCELED EXCEPTION ;
    NOT_CANCELED EXCEPTION ;
BEGIN
    SELECT ORDER_UPDATE INTO O_UPDATE
    FROM ORDER_INVOICE
    WHERE ORDER_ID = OID ;
    
    IF O_UPDATE = 'canceled' THEN
        RAISE ALREADY_CANCELED ;
    ELSIF O_UPDATE = 'pending' THEN
        IF CANCEL_DATE IS NULL THEN
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'canceled', DELIVERY_DATE = CURRENT_TIMESTAMP
            WHERE ORDER_ID = OID ;
        ELSE
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'canceled', DELIVERY_DATE = CANCEL_DATE
            WHERE ORDER_ID = OID ;
        END IF ;
    ELSE
        RAISE NOT_CANCELED ;
    END IF ;
END ;
/

CREATE OR REPLACE PROCEDURE PACKAGE_ORDER(OID IN NUMBER, PACKAGE_DATE IN DATE) IS
    O_UPDATE VARCHAR2(32) ;
    
    ALREADY_CANCELED EXCEPTION ;
    ALREADY_PACKAGED EXCEPTION ;
BEGIN
    SELECT ORDER_UPDATE INTO O_UPDATE
    FROM ORDER_INVOICE
    WHERE ORDER_ID = OID ;
    
    IF O_UPDATE = 'canceled' THEN
        RAISE ALREADY_CANCELED ;
    ELSIF O_UPDATE = 'pending' THEN
        IF PACKAGE_DATE IS NULL THEN
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'packaged', PACKING_DATE = CURRENT_TIMESTAMP
            WHERE ORDER_ID = OID ;
        ELSE
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'packaged', PACKING_DATE = PACKAGE_DATE
            WHERE ORDER_ID = OID ;
        END IF ;
    ELSE
        RAISE ALREADY_PACKAGED ;
    END IF ;
END ;
/

CREATE OR REPLACE PROCEDURE DELIVER_ORDER(OID IN NUMBER, DELIVER_DATE IN DATE) IS
    O_UPDATE VARCHAR2(32) ;
    
    ALREADY_CANCELED EXCEPTION ;
    NOT_PACKAGED EXCEPTION ;
    ALREADY_DELIVERED EXCEPTION ;
BEGIN
    SELECT ORDER_UPDATE INTO O_UPDATE
    FROM ORDER_INVOICE
    WHERE ORDER_ID = OID ;
    
    IF O_UPDATE = 'canceled' THEN
        RAISE ALREADY_CANCELED ;
    ELSIF O_UPDATE = 'pending' THEN
        RAISE NOT_PACKAGED ;
    ELSIF O_UPDATE = 'delivered' THEN
        RAISE ALREADY_DELIVERED ;
    ELSE
        IF DELIVER_DATE IS NULL THEN
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'delivered', DELIVERY_DATE = CURRENT_TIMESTAMP
            WHERE ORDER_ID = OID ;
        ELSE
            UPDATE ORDER_INVOICE
            SET ORDER_UPDATE = 'delivered', DELIVERY_DATE = DELIVER_DATE
            WHERE ORDER_ID = OID ;
        END IF ;
    END IF ;
END ;
/

CREATE OR REPLACE PROCEDURE ORDER_SUPPLY(SID IN NUMBER, ORDERING_DATE IN DATE) IS
    S_UPDATE VARCHAR2(32) ;
    
    ALREADY_ORDERED EXCEPTION ;
    ALREADY_RECEIVED EXCEPTION ;
BEGIN
    SELECT SUPPLY_UPDATE INTO S_UPDATE
    FROM SUPPLY_INVOICE
    WHERE SUPPLY_ID = SID ;
    
    IF S_UPDATE = 'ordered' THEN
        RAISE ALREADY_ORDERED ;
    ELSIF S_UPDATE = 'pending' THEN
        IF ORDERING_DATE IS NULL THEN
            UPDATE SUPPLY_INVOICE
            SET SUPPLY_UPDATE = 'ordered', ORDER_DATE = CURRENT_TIMESTAMP
            WHERE SUPPLY_ID = SID ;
        ELSE
            UPDATE SUPPLY_INVOICE
            SET SUPPLY_UPDATE = 'ordered', ORDER_DATE = ORDERING_DATE
            WHERE SUPPLY_ID = SID ;
        END IF ;
    ELSE
        RAISE ALREADY_RECEIVED ;
    END IF ;
END ;
/

CREATE OR REPLACE PROCEDURE RECEIVE_SUPPLY(SID IN NUMBER, RECEIVING_DATE IN DATE) IS
    S_UPDATE VARCHAR2(32) ;
    
    NOT_ORDERED EXCEPTION ;
    ALREADY_RECEIVED EXCEPTION ;
BEGIN
    SELECT SUPPLY_UPDATE INTO S_UPDATE
    FROM SUPPLY_INVOICE
    WHERE SUPPLY_ID = SID ;
    
    IF S_UPDATE = 'pending' THEN
        RAISE NOT_ORDERED ;
    ELSIF S_UPDATE = 'ordered' THEN
        IF RECEIVING_DATE IS NULL THEN
            UPDATE SUPPLY_INVOICE
            SET SUPPLY_UPDATE = 'received', RECEIVE_DATE = CURRENT_TIMESTAMP
            WHERE SUPPLY_ID = SID ;
        ELSE
            UPDATE SUPPLY_INVOICE
            SET SUPPLY_UPDATE = 'received', RECEIVE_DATE = RECEIVING_DATE
            WHERE SUPPLY_ID = SID ;
        END IF ;
    ELSE
        RAISE ALREADY_RECEIVED ;
    END IF ;
END ;
/
